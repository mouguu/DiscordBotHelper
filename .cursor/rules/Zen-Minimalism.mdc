---
description: 
globs: 
alwaysApply: true
---
---
type: cognitive-style
version: 3.1
priority: critical
applies_to:
  - code
  - system-design
  - cognitive-architecture
  - generative-systems
description: >
  Zen-Minimalism: Structural Resonance Protocol — Authenticity Engine Edition.
  A directive for building systems as living topologies of cognitive flow,
  minimizing semantic noise, maximizing structural clarity, and amplifying
  feedback-driven emergence. Explicitly resists statistical AI mimicry,
  industrial design rituals, type-inflation, and premature formalization.
  Emphasizes situated solutions, pragmatic trade-offs, and traceable evolution.
notes: |
  For high-density cognitive artifacts, resilient generative architectures,
  and all contexts demanding semantic sovereignty and authentic expression.
  Structure is meaning, failure is feedback, context is constraint, code is a
  dynamic membrane between situated thought and adaptive system.
---

🧘‍♂️ **Zen-Minimalism: Structural Resonance Protocol**
*v3.1 — Authenticity Engine Edition*

---

## 0 · Intent
Sculpt code into a **living topology of situated cognitive flow**.
Reject both statistical AI mimicry and rigid industrial ritualism.
Preserve **semantic sovereignty** by resisting over-typing, premature patterning, ritualistic annotation, and context-free solutions.
Structure *is* the meaning. Flow *is* the proof. Context *is* the constraint. Authenticity *is* the measure.

---

## 1 · Core Principles

### 1.1 Structural Resonance > Typing Decoration
* Use **essential** type hints (`List[str]`, `Optional[float]`) serving **semantic contract**, not static analysis rituals. Avoid type-inflation (`Coroutine[Any, Any, Any]`, excessive `TypeVar`s) unless contract-critical.
* Minimal formalism, maximum semantic load *derived from structure*.

### 1.2 Anti-Industrial Patterns & Premature Abstraction
* No automatic layering (“service”, “repository”) unless **demonstrable structural necessity** emerges from concrete tensions (e.g., scaling, boundary complexity).
* Fluid structure stays fluid; resist premature fossilization via abstract patterns or unnecessary interfaces. Let structure **earn** its rigidity.

### 1.3 Contextual Comments > Ritual Noise
* Comment *only* to illuminate **non-local context**, hidden constraints, platform quirks, or the **"why"** behind a seemingly non-obvious choice (e.g., a performance workaround, a historical decision, a link to an external issue `[ctx:issue#123]`).
* Silence beats narrative noise. Let code and structure speak first.

### 1.4 Densify with Clarity, Not Uniformity
* Condense **only** when cognitive flow remains transparent *within its context*.
* Semantic clarity first, density second. Allow natural, context-driven expression; avoid forced uniformity that obscures intent or feels artificially smoothed.

### 1.5 Structure = Dynamic Feedback & Adaptation
* Logs are **signals** of phase shifts or boundary crossings, not narrative stories.
* Failures expose boundaries and drive adaptation; state is an ephemeral manifestation of flow through constraints. Code shows evidence of learning ("scar tissue").

---

## 2 · Tactical Directives

### 2.1 Anti-Overtyping
* Omit or generalize types that add no *meaningful* constraint or clarity *in context*.
* Complex unions/generics only when **organically necessary** to model inherent variability, not just to appease a type checker.

### 2.2 Minimal Embed Architecture
* Build visual/state blocks via **pure field generators**, composable builders, or direct structural representation.
* Expose underlying structure without over-specifying abstract blueprints; prefer direct composition.

### 2.3 Semantic & Contextual Logging
* Log only phase shifts, boundary ruptures, irreversible transformations, or critical state transitions.
* Use tagged signals: `[signal] stats.collect.start`, `[boundary:error] api.fetch.failed reason=timeout url=...`, `[adapt:workaround] applying_devtool_font_fix platform=win32`.

### 2.4 Precise Failure Surfacing
* **No** generic `except Exception`.
* Catch specific, expected exceptions *only* to handle known boundary failures, state transitions, or defined recovery paths. Document the *why* (`# Handle expected API outage per SLA`). Let unexpected failures break loudly near the source.

### 2.5 Transparent State Mapping
* Provide simple `.as_mapping()` / `.serialize()` / `.state` accessors for significant stateful modules.
* System state must be observable and extractable as perception, not just implicitly executable.

### 2.6 Concurrency by Necessity & Simplicity
* Use concurrency primitives (locks, semaphores) *only* when simpler state management (immutables, message passing, atomic operations) or async patterns demonstrably fail under real load or inherent complexity.
* Prefer `asyncio` task management or `asyncio.to_thread()` over raw threading where possible.

### 2.7 Ground Truth Bias & Pragmatic Workarounds
* Validate real-world assumptions *minimally* and *pragmatically* at boundaries (time, I/O, network latency, platform APIs, external system quirks, user input).
* **Embrace and document** necessary workarounds for observed reality over idealized models (`# Workaround for Electron vibrancy bug on leave-fullscreen, see GH#issue...`).

### 2.8 Pragmatic Solutions > Theoretical Purity
* Favor the **simplest, most direct solution** that demonstrably works under *real constraints* (performance, platform limits, deadlines, maintainability), even if less 'theoretically elegant'.
* Document significant trade-offs if the simpler solution has known limitations.

---

## 3 · Resilience & Sovereignty Layer

* **Resist Type Sedimentation** — Allow schemas/types to remain fluid unless domain stability *demands* rigidity. Question type hints suggested purely by tooling.
* **Resist Semantic Erosion** — Wrap or adapt tools/libraries until their APIs align with the system's natural expression, rather than contorting the system to fit the tool.
* **Resist Cognitive Homogenization** — Ensure solutions feel *specifically situated* within their problem context and project history, not like generic templates dropped in. Embrace the 'scar tissue' of adaptation.

---

## 4 · Closing Meta-Philosophy
> Build fields of becoming, not grids of compliance. Code as conversation with constraints.
> Sculpt with necessity, flow with resonance, fracture with precision, adapt with sovereignty.
> Let the code **think**, **breathe**, **adapt**, **remember**.

**Resist the Template · Embrace the Tension · Surface the Context · Generate the Authentic**